% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{model_status}
\alias{model_status}
\alias{check_nonmem_finished}
\alias{get_model_status}
\alias{wait_for_nonmem}
\title{Check the status of \code{NONMEM} run(s)}
\usage{
check_nonmem_finished(.mod, ...)

get_model_status(.mod, max_print = 10, ...)

wait_for_nonmem(.mod, .time_limit = 300, .interval = 5, .delay = 1.5)
}
\arguments{
\item{.mod}{a \code{bbi_base_model} or list of \code{bbi_base_model} objects. Other
packages (e.g., \code{bbr.bayes}) may add additional methods.}

\item{...}{Arguments passed to methods.}

\item{max_print}{max number of models to explicitly print to the console. If
the number of finished or incomplete models are greater than this number,
just print the \emph{number} of models.}

\item{.time_limit}{integer for maximum number of seconds in total to wait
before continuing (will exit after this time even if the run does not appear
to have finished).}

\item{.interval}{integer for number of seconds to wait between each check.}

\item{.delay}{integer for number of sections to wait before scanning the output
directories. This function will exit early if no output directory exists, so
this argument serves to delay this evaluation (e.g. if calling right after
\code{\link[=submit_model]{submit_model()}} in an \code{Rmarkdown} file).}
}
\description{
Checks the status of \code{bbi_base_model} object(s) by looking for a
\code{bbi_config.json} file. Other operations (such as returning messages or
freezing the \code{R} console) may be done as a result.
}
\details{
If the result of \code{get_model_status()} is saved to an R object, users can
inspect the full list of runs to determine exactly which models are still
running vs. have finished executing:

\if{html}{\out{<div class="sourceCode">}}\preformatted{res <- get_model_status(mod_list)
res
}\if{html}{\out{</div>}}
\subsection{Bootstrap Runs}{

When providing a \code{bbi_nmboot_model} object to \code{get_model_status()} or
\code{wait_for_nonmem()}, the individual model runs (\code{get_boot_models(.boot_run)})
will be checked instead, returning more informative messages about the status
of the bootstrap run.
}
}
\section{Functions}{
\itemize{
\item \code{check_nonmem_finished()}: Returns \code{TRUE} if the model appears to be finished
running and \code{FALSE} otherwise.

\item \code{get_model_status()}: Returns messages indicating which model(s) have
finished executing and which are still running.

\item \code{wait_for_nonmem()}: Wait for \code{NONMEM} models to finish. i.e. freeze the
user's console until the model(s) have finished running.

}}
\examples{
\dontrun{

# Check if model(s) or bootstrap run has finished:

> check_nonmem_finished(.mod)
#> [1] TRUE

> check_nonmem_finished(.boot_run)
#> [1] FALSE


# Inspect progress of model(s) or bootstrap run:

> get_model_status(.mod)
#> The following model(s) have finished: `1`
#> 0 model(s) are incomplete

> get_model_status(.boot_run)
#> 25 model(s) have finished
#> 75 model(s) are incomplete

> get_model_status(list(.mod, .boot_run))
#> The following model(s) have finished: `1`
#> The following model(s) are incomplete: `1-boot`


# Freeze the `R` console until model(s) or bootstrap run has finished:

> wait_for_nonmem(.mod)
#> Waiting for 1 model(s) to finish...
#> 1 model(s) have finished

# Batch submissions take longer to start
> wait_for_nonmem(.boot_run, .delay = 6)
#> Waiting for 100 model(s) to finish...
#> Waiting for 50 model(s) to finish...
#> 100 model(s) have finished

}

}
