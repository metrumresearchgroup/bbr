% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/submit-models.R
\name{submit_models}
\alias{submit_models}
\alias{submit_models.list}
\title{Submit models to be run in batch}
\usage{
submit_models(
  .mods,
  .bbi_args = NULL,
  .mode = getOption("bbr.bbi_exe_mode"),
  ...,
  .overwrite = NULL,
  .config_path = NULL,
  .wait = TRUE,
  .dry_run = FALSE
)

\method{submit_models}{list}(
  .mods,
  .bbi_args = NULL,
  .mode = getOption("bbr.bbi_exe_mode"),
  ...,
  .overwrite = NULL,
  .config_path = NULL,
  .wait = TRUE,
  .dry_run = FALSE
)
}
\arguments{
\item{.mods}{The model objects to submit.}

\item{.bbi_args}{A named list specifying arguments to pass to bbi
formatted like \code{list("nm_version" = "nm74gf_nmfe", "json" = T, "threads" = 4)}. Run \code{\link[=print_bbi_args]{print_bbi_args()}} to see valid arguments. Note that bbr does
not support changing the output directory (including through the model or
global YAML files).}

\item{.mode}{Mode for model submission: "local", "sge", or "slurm". If
unspecified, the value is set to the value of the \code{bbr.bbi_exe_mode}
option. This option defaults to "sge" on Linux and "local" otherwise.}

\item{...}{args passed through to \code{bbi_exec()}}

\item{.overwrite}{Logical to specify whether or not to overwrite existing
model output from a previous run. If \code{NULL}, the default, will defer to
setting in \code{.bbi_args} or \code{bbi.yaml}. If \emph{not} \code{NULL} will override any
settings in \code{.bbi_args} or \code{bbi.yaml}. \strong{The exception to this are analysis
runs (\code{bbi_nmboot_model} and \code{bbi_nmsse_model} objects).} For analysis
runs (bootstrap and SSE), this defaults to \code{FALSE} and does \emph{not} respect
any setting passed via \code{.bbi_args} or a \code{bbi.yaml} config file. To
overwrite an existing analysis output, a user must pass \code{TRUE} through this
argument.}

\item{.config_path}{Path to a bbi configuration file. If \code{NULL}, the
default, will attempt to use a \code{bbi.yaml} in the same directory as the
model.}

\item{.wait}{If \code{TRUE}, the default, wait for the bbi process to return
before this function call returns. If \code{FALSE} function will return while
bbi process runs in the background.}

\item{.dry_run}{Returns an object detailing the command that would be run,
insted of running it. This is primarily for testing but also a debugging
tool.}
}
\description{
Submits a group of models to be run in batch by calling out to \code{bbi} in as
few external calls as possible (see "Details").
}
\details{
The number of \code{bbi} calls to make is determined by the number of
distinct sets of \code{bbi} arguments passed to the submission calls, either
explicitly through \code{.bbi_args}, as specified in the \code{bbi_args} field of the
model YAML, or specified globally in \code{bbi.yaml}.
}
\section{Methods (by class)}{
\itemize{
\item \code{submit_models(list)}: Takes a list of \code{bbi_base_model} objects.

}}
\section{Notes on \code{NONMEM} model extensions}{


Before executing the model, \code{bbi} first copies the control stream file to a
subdirectory. Whether a relative path to the data file in the control stream
is adjusted for this change in directory depends on the control stream's file
extension:
\itemize{
\item For a model with a \code{.mod} extension, \code{bbi} automatically adjusts a
relative data path to make it relative to the \emph{execution} directory,
following the behavior of \code{PsN}.
\item For a model with a \code{.ctl} extension, \code{bbi} does \emph{not} adjust the data
path. A relative data path in the control stream must be specified
\strong{one level deeper} (i.e. with an additional \verb{../}) to account for the
model being executed in a subdirectory.
}
}

\seealso{
\code{\link[=submit_model]{submit_model()}}

Other \code{NONMEM} model extensions: 
\code{\link{get_data_path}()},
\code{\link{submit_model}()}
}
\concept{\code{NONMEM} model extensions}
