% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vpc-simulation.R
\name{simulate}
\alias{simulate}
\alias{add_simulation}
\alias{has_simulation}
\alias{get_simulation}
\title{Simulate a \code{bbi_nonmem_model} object}
\usage{
add_simulation(
  .mod,
  n = 200,
  seed = 1234,
  data = NULL,
  sim_cols = c("DV", "PRED"),
  .join_col = "NUM",
  .inherit_tags = TRUE,
  .bbi_args = NULL,
  .mode = getOption("bbr.bbi_exe_mode"),
  ...,
  .overwrite = NULL,
  .config_path = NULL,
  .wait = TRUE,
  .dry_run = FALSE
)

has_simulation(.mod)

get_simulation(.mod)
}
\arguments{
\item{.mod}{A \code{bbi_nonmem_model} or \code{bbi_nonmem_summary} object}

\item{n}{Number of simulations/subproblems. Adds \code{SUBPROBLEMS=n} to a
\verb{$SIMULATION} record.}

\item{seed}{A seed for simulation. Appended to \verb{$SIMULATION} record.}

\item{data}{A dataset to simulate from. Defaults to \code{NULL}, which will use
use the original data. If provided, must include the same column names as
what's returned from \code{nm_data(.mod)}.}

\item{sim_cols}{Character column name(s) defining the simulated values to
table out.}

\item{.join_col}{Character column name(s) used to join table files post
execution. Gets appended to the generated \verb{$TABLE} record. See
\code{\link[=nm_join_sim]{nm_join_sim()}} documentation for details. Defaults to \code{'NUM'}.}

\item{.inherit_tags}{If \code{TRUE}, the default, inherit any tags from \code{.mod}.}

\item{.bbi_args}{A named list specifying arguments to pass to bbi
formatted like \code{list("nm_version" = "nm74gf_nmfe", "json" = T, "threads" = 4)}. Run \code{\link[=print_bbi_args]{print_bbi_args()}} to see valid arguments. Note that bbr does
not support changing the output directory (including through the model or
global YAML files).}

\item{.mode}{Either \code{"sge"}, the default, to submit model(s) to the grid or
\code{"local"} for local execution. This can be passed directly to this argument
or set globally with \code{options("bbr.bbi_exe_mode")}.}

\item{...}{args passed through to \code{bbi_exec()}}

\item{.overwrite}{Logical to specify whether or not to overwrite existing
model output from a previous run. If \code{NULL}, the default, will defer to
setting in \code{.bbi_args} or \code{bbi.yaml}. If \emph{not} \code{NULL} will override any
settings in \code{.bbi_args} or \code{bbi.yaml}.}

\item{.config_path}{Path to a bbi configuration file. If \code{NULL}, the
default, will attempt to use a \code{bbi.yaml} in the same directory as the
model.}

\item{.wait}{If \code{TRUE}, the default, wait for the bbi process to return
before this function call returns. If \code{FALSE} function will return while
bbi process runs in the background.}

\item{.dry_run}{Returns an object detailing the command that would be run,
insted of running it. This is primarily for testing but also a debugging
tool.}
}
\description{
Create and submit a new \code{bbi_nmsim_model} object, which is then attached to
the existing \code{bbi_nonmem_model} object
}
\details{
\code{add_simulation} does the following things:
\itemize{
\item Checks that \code{.mod} was previously executed and tabled out an \code{MSF} file
(i.e. \verb{$EST MSFO=1.MSF}).
\itemize{
\item \strong{Note:} The \code{MSF} file must have an upper case extension, otherwise
it will be cleaned up after submission
}
\item Performs various checks to confirm the status of \code{.mod}, the contents of its
control stream, and the input data.
\item Creates a new \code{bbi_nmsim_model} object with the following differences from
the original control stream:
\itemize{
\item Removes the following record types for simulation: \verb{$EST}, \verb{$COV},
\verb{$TABLE}, \verb{$SIMULATION}
\item Removes PK and prior records: \verb{$PRIOR}, \verb{$THETA/$THETAP/$THETAPV},
\verb{$OMEGA/$OMEGAP/$OMEGAPD}, \verb{$SIGMA/$SIGMAP/$SIGMAPD}
\item Adds a new custom \verb{$SIMULATION} record using user specified values (e.g.
\code{seed} and \code{n}).
\itemize{
\item \code{TRUE=FINAL} is appended to ensure the final values are used rather
than the initial estimates.
\item \code{ONLYSIMULATION} flag is appended to reduce run times.
}
\item Adds a new \verb{$TABLE} record tabling out simulated values (\code{sim_cols}) and
\code{.join_col} column(s)
\item Adds a new \verb{$MSFI} record (run with \code{NOMSFTEST}) pointing to the \code{MSF}
file of \code{.mod}
}
\item Creates a specification file, storing \code{seeds}, \code{n}, and other various items
helpful for traceability purposes.
\item Submits the model for execution.
}
}
\section{Functions}{
\itemize{
\item \code{add_simulation()}: Add a simulation to a \code{bbi_nonmem_model} object

\item \code{has_simulation()}: Helper for determining if a \code{bbi_nonmem_model} has a
simulation attached to it. Returns \code{TRUE} if a \code{bbi_nmsim_model}
specification file is found within the output directory of \code{.mod}, and
\code{FALSE} otherwise.

\item \code{get_simulation()}: Read in and return a \code{bbi_nmsim_model} object stored
within the output directory of \code{.mod}.

}}
\examples{
\dontrun{

# Add a new simulation and submit for execution
add_simulation(
  .mod,
  n = 500,
  .join_col = c("NUM", "ID"),
  .mode = "local"
)

# Optionally read in simulation model object
if(has_simulation(.mod)){
 .sim <- get_simulation(.mod)
}
}
}
\seealso{
nm_join_sim
}
