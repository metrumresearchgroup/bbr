% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bbi-stan-model.R
\name{bbi_stan_model}
\alias{bbi_stan_model}
\title{\code{bbi_stan_model} object}
\description{
This page describes the basic structure of the \code{bbi_stan_model}
object which is used for defining and submitting models with Stan and
\code{bbr}. The Details section contains information about the model structure
and the necessary files that will exist on disk for any \code{bbi_stan_model}.
}
\details{
\strong{Model Structure}

\strong{\verb{<run>}} - The "run" is, in some sense, the “name” of a given model.
Practically, it will correspond to the model directory name, the base name of
the bbr-created YAML (\verb{<run>.yaml}), as well as the base name for some files
in that directory. Calling \code{\link[=get_model_id]{get_model_id()}} on a model object will return
\verb{<run>} as a string. The \code{bbi_log_df} tibbles also all contain a run column
which is populated by calling \code{basename(.mod$absolute_model_path)} for each
model. Note: this is \emph{not} actually stored in the model object because it can
be unequivocally extracted as just described.

\strong{\code{absolute_model_path}} - Like the \code{bbi_nonmem_model}, the \code{bbi_stan_model}
will carry around only an absolute path to the model directory. This will
point to the model directory (named \verb{<run>}) containing all of the files
described below, as well as a \verb{<run>.yaml} file that \code{bbr} uses to persist
model metadata. A model is loaded or created by passing a relative path to
this directory to either \code{\link[=read_model]{read_model()}} or \code{\link[=new_model]{new_model()}}, both of which
return the \code{bbi_stan_model} object. When this object is created, it checks
the model directory for the relevant files and populates
\code{absolute_model_path}.

\strong{Necessary Files}

All of the files described below will exist inside the model directory named
\verb{<run>}. If you call \code{new_model(..., .model_type = "stan")} without any of
these files, template "scaffold" files for all of them will be created in the
newly created model directory.

\strong{\verb{<run>.stan}} - The Stan file.

\strong{\verb{<run>-standata.R}} - This file contains all necessary R code to read in
any source data and transform them to a Stan-ready data object (list).
\itemize{
\item Contains only one function, called \code{make_standata(.dir)}, that takes a
single argument and returns the data list to pass to \code{cmdstanr::sample()}.
\item The \code{.dir} argument will be the directory containing the script. This is
used to find data files for loading, for example \verb{read_csv(file.path(.dir, “..”, “..”, “data”, “derived”, “my_data.csv”))}
\item Can be called (by \code{bbr::build_data()}) to generate the data for model
submission or to compare the resulting data to previously saved data on disk.
}

\strong{\verb{<run>-init.R}} - This file contains all necessary R code to create the
initial values passed to \code{cmdstanr::sample()}.
\itemize{
\item Contains only one function, called \code{make_init(.data)}, that takes a single
argument and returns something that can be passed to the \code{init} argument of
\code{cmdstanr::sample()}. There are several options; see \code{?cmdstanr::sample} for
details.
\item Will be called internally by \code{bbr} and the result passed to
\code{cmdstanr::sample(init)}
\item Note that one of the options \code{cmdstanr::sample(init)} is to pass \emph{"A
function that returns a single list..."}. If you intend to use this option,
your \code{make_init()} function must return \emph{the function} described, \emph{not} the
"single list...".
}

\strong{Other Files and Directories}

There will be several other things created in the model directory, as the
model is run or as it prepares to run.

\strong{\verb{<run>-stanargs.R}} - A file to capture the arguments passed into
\code{cmdstanr::sample()} (\code{nChains}, etc.) through \code{\link[=submit_model]{submit_model()}}. This
will be written to file with \code{dput()} so that it can be compared, and
possibly re-used, in the future.

\strong{\verb{<run>}} - This is the binary file created when the \verb{<run>.stan} file is
compiled by \code{cmdstan}. We \code{.gitignore} this automatically.

\strong{\verb{<run>-output}} - This directory is created by \code{bbr}. It is where the
posteriors will be saved (currently as CSV’s) and also where the
\code{bbi_config.json} is saved when the model run finishes successfully. Note
that we \emph{don’t} call this \verb{<run>} (as is done in NONMEM) for two primary
reasons:
\itemize{
\item It is more informative to call it \verb{<run>-output} to distinguish it from all
the other files and directories that start with \verb{<run>}.
\item There is also the binary called \verb{<run>} (previously mentioned) that could
cause confusion. In fact, there was a bug in \code{cmdstanr} in February 2021
involving exactly this scenario.
}

\verb{<run>-output/bbi_config.json} - This file is created by \code{bbr} when a model
run finishes successfully. It stores some configuration information about the
run, as well as the md5 hashes of the necessary files. These hashes are later
used (by \code{bbr::check_up_to_date()} to check whether the files have changed
since the model was run, primarily for reproducibility purposes.

\strong{Some Helper Functions}
\itemize{
\item \strong{\code{\link[=check_stan_model]{check_stan_model()}}} (mentioned above) - Checks for the necessary files
before running or copying the model.
\item \strong{\code{\link[=build_path_from_model]{build_path_from_model()}}} - Builds the absolute path a file in the
model folder from a model object and a suffix.
\item \strong{\code{\link[=add_stan_file]{add_stan_file()}}, \code{\link[=add_standata_file]{add_standata_file()}}, \code{\link[=add_stan_init]{add_stan_init()}}} - Helpers
for adding one of the necessary files to the model folder.
\item \strong{\code{\link[=model_diff]{model_diff()}}} - Compare necessary files between two models. Defaults
to comparing \verb{<run>.stan} files.
\item Also has many of the same helpers as \code{bbi_nonmem_model} objects:
\code{\link[=tags_diff]{tags_diff()}}, \code{\link[=add_tags]{add_tags()}}, \code{\link[=add_notes]{add_notes()}}, \code{\link[=get_model_path]{get_model_path()}},
\code{\link[=get_output_dir]{get_output_dir()}}, \code{\link[=get_model_id]{get_model_id()}}
}
}
