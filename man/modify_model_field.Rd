% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify-model-field.R
\name{modify_model_field}
\alias{modify_model_field}
\alias{replace_model_field}
\alias{add_tags}
\alias{replace_tag}
\alias{replace_all_tags}
\alias{remove_tags}
\alias{add_notes}
\alias{replace_note}
\alias{replace_all_notes}
\alias{remove_notes}
\alias{add_based_on}
\alias{replace_based_on}
\alias{replace_all_based_on}
\alias{remove_based_on}
\alias{replace_description}
\alias{add_bbi_args}
\alias{replace_all_bbi_args}
\alias{add_decisions}
\alias{replace_decisions}
\title{Modify field in model object}
\usage{
modify_model_field(
  .mod,
  .field,
  .value,
  .append = TRUE,
  .remove = FALSE,
  .unique = TRUE
)

replace_model_field(.mod, .field, .old_val, .new_val)

add_tags(.mod, .tags)

replace_tag(.mod, .old_tag, .new_tag)

replace_all_tags(.mod, .tags)

remove_tags(.mod, .tags)

add_notes(.mod, .notes)

replace_note(.mod, .old_note, .new_note)

replace_all_notes(.mod, .notes)

remove_notes(.mod, .notes)

add_based_on(.mod, .based_on)

replace_based_on(.mod, .old_based_on, .new_based_on)

replace_all_based_on(.mod, .based_on)

remove_based_on(.mod, .based_on)

replace_description(.mod, .description)

add_bbi_args(.mod, .bbi_args)

replace_all_bbi_args(.mod, .bbi_args)

add_decisions(.mod, .decisions)

replace_decisions(.mod, .decisions)
}
\arguments{
\item{.mod}{The \verb{bbi_\{.model_type\}_model} object to modify}

\item{.field}{Character scalar of the name of the component to modify}

\item{.value}{Whatever is to be added to \code{.mod[[.field]]}, typically a character vector}

\item{.append}{If \code{TRUE}, the default, concatenate new values with currently present values. If \code{FALSE}, new values will overwrite old values.}

\item{.remove}{If \code{TRUE}, \code{.value} with be removed from the \code{.field} instead of added. \code{FALSE} by default. Cannot have both \code{.append} and \code{.remove} be true in the same call.}

\item{.unique}{If \code{TRUE}, the default, de-duplicate \code{.mod[[.field]]} after adding new values. If \code{FALSE} duplicate values will be kept.}

\item{.old_val}{The value to be replaced. If \code{.old_val} is not present in
\code{.mod[[.field]]}, function will warn user and return \code{.mod} unchanged.}

\item{.new_val}{The value to insert in place of \code{.old_val} in
\code{.mod[[.field]]}.}

\item{.tags}{Character vector to add to \code{tags} field}

\item{.old_tag}{Character scalar of tag to be replaced}

\item{.new_tag}{Character scalar of tag that will be added}

\item{.notes}{Character vector to add to \code{notes} field}

\item{.old_note}{Character scalar of note to be replaced}

\item{.new_note}{Character scalar of note that will be added}

\item{.based_on}{Character vector of relative paths to add to \code{based_on} field}

\item{.old_based_on}{Character scalar of based_on element to be replaced}

\item{.new_based_on}{Character scalar of based_on element that will be added}

\item{.description}{Character scalar to use as replacement for the \code{description} field}

\item{.bbi_args}{named list of arguments to add to the model}

\item{.decisions}{Character vector to use as replacement}
}
\description{
Helper functions for updating fields in a \verb{bbi_\{.model_type\}_model} object.
Note that calling \code{modify_model_field()} or \code{replace_model_field()} directly
is \emph{not} recommended for most users because it requires knowing about the
internal structure of the model object. Instead, \strong{we recommend using the
friendlier helpers listed below} (\code{add_...} or \code{replace_...}) when possible.
}
\details{
All functions in this family also check the object against the corresponding YAML with \code{check_yaml_in_sync()} before modifying it,
and errors if they are out of sync.
After the object has been modified they will write the modified object back to the YAML and update the model object in
memory with an md5 digest of the newly written YAML.
}
\section{Functions}{
\itemize{
\item \code{replace_model_field}: Replace a single item in a model field

\item \code{add_tags}: Add tags to a model object and corresponding YAML

\item \code{replace_tag}: Replaces a specific \code{.old_tag} with \code{.new_tag} on a model object and corresponding YAML.
Warns and does nothing if \code{.old_tag} is not present.

\item \code{replace_all_tags}: Replaces all tags on a model object and corresponding YAML with new tags

\item \code{remove_tags}: Removes tags from a model object and corresponding YAML

\item \code{add_notes}: Add notes to a model object and corresponding YAML

\item \code{replace_note}: Replaces a specific \code{.old_note} with \code{.new_note} on a model object and corresponding YAML.
Warns and does nothing if \code{.old_note} is not present.

\item \code{replace_all_notes}: Replaces all notes on a model object and corresponding YAML with new notes

\item \code{remove_notes}: Removes notes from a model object and corresponding YAML

\item \code{add_based_on}: Append new \code{based_on} tag(s) to a model object and corresponding YAML

\item \code{replace_based_on}: Replaces a specific \code{.old_based_on} with \code{.new_based_on} on a model object and corresponding YAML.
Warns and does nothing if \code{.old_based_on} is not present.

\item \code{replace_all_based_on}: Replaces entire \code{based_on} field in a model object and corresponding YAML with new values

\item \code{remove_based_on}: Remove specified \code{based_on} tag(s) from a model object and corresponding YAML

\item \code{replace_description}: Replaces description field in a model object and corresponding YAML with new description

\item \code{add_bbi_args}: Modifies model object and corresponding YAML
by adding named list passed to \code{.bbi_args}, overwriting any args that are
already present with the new values. Use \code{\link[=print_bbi_args]{print_bbi_args()}} to see a list
of valid babylon arguments.

\item \code{replace_all_bbi_args}: Modifies model object and corresponding YAML
by replacing all \code{bbi_args} with named list passed to \code{.bbi_args}. Use
\code{\link[=print_bbi_args]{print_bbi_args()}} to see a list of valid babylon arguments.

\item \code{add_decisions}: \emph{Deprecaed}  Append new decisions to the one(s) in a model object and corresponding YAML

\item \code{replace_decisions}: \emph{Deprecaed} Replaces \code{decisions} field in a model object and corresponding YAML with new values
}}

