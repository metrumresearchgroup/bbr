% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/submit-model.R
\name{submit_model}
\alias{submit_model}
\alias{submit_model.bbi_base_model}
\alias{submit_model.bbi_nmsim_model}
\alias{submit_model.bbi_nmboot_model}
\title{Submit a model to be run}
\usage{
submit_model(
  .mod,
  .bbi_args = NULL,
  .mode = getOption("bbr.bbi_exe_mode"),
  ...,
  .overwrite = NULL,
  .config_path = NULL,
  .wait = TRUE,
  .dry_run = FALSE
)

\method{submit_model}{bbi_base_model}(
  .mod,
  .bbi_args = NULL,
  .mode = getOption("bbr.bbi_exe_mode"),
  ...,
  .overwrite = NULL,
  .config_path = NULL,
  .wait = TRUE,
  .dry_run = FALSE
)

\method{submit_model}{bbi_nmsim_model}(
  .mod,
  .bbi_args = NULL,
  .mode = getOption("bbr.bbi_exe_mode"),
  ...,
  .overwrite = NULL,
  .config_path = NULL,
  .wait = TRUE,
  .dry_run = FALSE
)

\method{submit_model}{bbi_nmboot_model}(
  .mod,
  .bbi_args = NULL,
  .mode = "sge",
  ...,
  .overwrite = FALSE,
  .config_path = NULL,
  .wait = FALSE,
  .dry_run = FALSE,
  .batch_size = 100
)
}
\arguments{
\item{.mod}{The model object to submit.}

\item{.bbi_args}{A named list specifying arguments to pass to bbi
formatted like \code{list("nm_version" = "nm74gf_nmfe", "json" = T, "threads" = 4)}. Run \code{\link[=print_bbi_args]{print_bbi_args()}} to see valid arguments. Note that bbr does
not support changing the output directory (including through the model or
global YAML files).}

\item{.mode}{Either \code{"sge"}, the default, to submit model(s) to the grid or
\code{"local"} for local execution. This can be passed directly to this argument
or set globally with \code{options("bbr.bbi_exe_mode")}.}

\item{...}{args passed through to \code{bbi_exec()}}

\item{.overwrite}{Logical to specify whether or not to overwrite existing
model output from a previous run. If \code{NULL}, the default, will defer to
setting in \code{.bbi_args} or \code{bbi.yaml}. If \emph{not} \code{NULL} will override any
settings in \code{.bbi_args} or \code{bbi.yaml}. \strong{The exception to this are
bootstrap runs (\code{bbi_nmboot_model} objects).} For bootstrap runs, this
defaults to \code{FALSE} and does \emph{not} respect any setting passed via
\code{.bbi_args} or a \code{bbi.yaml} config file. To overwrite existing bootstrap
output, a user must pass \code{TRUE} through this argument.}

\item{.config_path}{Path to a bbi configuration file. If \code{NULL}, the
default, will attempt to use a \code{bbi.yaml} in the same directory as the
model.}

\item{.wait}{If \code{TRUE}, the default, wait for the bbi process to return
before this function call returns. If \code{FALSE} function will return while
bbi process runs in the background.}

\item{.dry_run}{Returns an object detailing the command that would be run,
insted of running it. This is primarily for testing but also a debugging
tool.}

\item{.batch_size}{Number of models to submit to run concurrently as a
"batch." Passing \code{NULL} (or a number larger than the number of submitted
models) will bypass this and submit all models concurrently. This will
launch a background process to manage the batch submission. Details from
this process are logged in the \code{OUTPUT} file in top-level bootstrap model
directory.}
}
\value{
While \code{submit_model()} \emph{does} return something, it is primarily
called for its side effects, specifically that it runs the model and writes
all model outputs to disk under \code{get_output_dir(.mod)}.

\strong{NONMEM}
For NONMEM models, a \code{bbi_process} object is returned. The typical NONMEM
output files are all written into \code{get_output_dir(.mod)}. A summary of the
contents of these files can be accessed with \code{\link[=model_summary]{model_summary()}}, and the path
to individual files can be easily constructed like
\code{build_path_from_model(.mod, ".lst")}.

A \code{bbi_config.json} file is also written, which stores information about the
configuration of the run. See \code{\link[=config_log]{config_log()}} for more details about this
file.
}
\description{
Submits a model to be run by calling out to \code{bbi}.
}
\section{Methods (by class)}{
\itemize{
\item \code{submit_model(bbi_base_model)}: Takes a \code{bbi_base_model} object.

\item \code{submit_model(bbi_nmsim_model)}: Takes a \code{bbi_base_model} object.

\item \code{submit_model(bbi_nmboot_model)}: Takes a \code{bbi_nmboot_model} object.

}}
\section{Notes on \code{NONMEM} model extensions}{


Before executing the model, \code{bbi} first copies the control stream file to a
subdirectory. Whether a relative path to the data file in the control stream
is adjusted for this change in directory depends on the control stream's file
extension:
\itemize{
\item For a model with a \code{.mod} extension, \code{bbi} automatically adjusts a
relative data path to make it relative to the \emph{execution} directory,
following the behavior of \code{PsN}.
\item For a model with a \code{.ctl} extension, \code{bbi} does \emph{not} adjust the data
path. A relative data path in the control stream must be specified
\strong{one level deeper} (i.e. with an additional \verb{../}) to account for the
model being executed in a subdirectory.
}
}

\seealso{
\code{\link[=submit_models]{submit_models()}}

Other \code{NONMEM} model extensions: 
\code{\link{get_data_path}()},
\code{\link{submit_models}()}
}
\concept{\code{NONMEM} model extensions}
