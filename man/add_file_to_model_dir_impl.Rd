% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add-file-to-model-dir.R
\name{add_file_to_model_dir_impl}
\alias{add_file_to_model_dir_impl}
\title{Attaches a file to a model}
\usage{
add_file_to_model_dir_impl(
  .mod,
  .model_class,
  .file_suffix,
  .scaffold_string,
  .source_file = NULL,
  .overwrite = ifelse(is.null(.source_file), FALSE, TRUE)
)
}
\arguments{
\item{.mod}{a \verb{bbi_\{.model_type\}_model} object}

\item{.model_class}{Function will assert that \code{.mod} inherits from this class.}

\item{.file_suffix}{Destination path is created with \code{build_path_from_model(.mod, .file_suffix)}}

\item{.scaffold_string}{If \code{.source_file} is \code{NULL}, the default, this string will be written
into a new file at the destination path.}

\item{.source_file}{If \code{NULL}, the default, create an empty scaffold file
at the destination path. If not \code{NULL}, pass a path to a file that
will be copied to the destination path. Use this if you have a
file elsewhere on disk that you would like to use for this model.}

\item{.overwrite}{Logical scalar for whether to overwrite and existing
file at the destination path. If \code{is.null(.source_file)} this defaults
to \code{FALSE}, forcing the user to explicitly confirm overwriting an
existing file with a scaffold. However, \strong{if \code{.source_file} is passed
then \code{.overwrite} defaults to \code{TRUE}}, assuming that the user intends
to use the \code{.source_file} instead of the existing file.}
}
\description{
Implementation function for \code{\link[=add_file_to_model_dir]{add_file_to_model_dir()}}.
}
\keyword{internal}
