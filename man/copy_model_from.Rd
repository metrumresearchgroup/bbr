% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/copy-model-from.R
\name{copy_model_from}
\alias{copy_model_from}
\alias{copy_model_from.bbi_nonmem_model}
\alias{copy_model_from.character}
\alias{copy_model_from.numeric}
\title{Generic S3 method from iterating on models.}
\usage{
copy_model_from(
  .parent_mod,
  .new_model,
  .description,
  .based_on_additional = NULL,
  .add_tags = NULL,
  .inherit_tags = FALSE,
  .update_model_file = TRUE,
  .overwrite = FALSE,
  .directory = get_model_directory()
)

\method{copy_model_from}{bbi_nonmem_model}(
  .parent_mod,
  .new_model,
  .description,
  .based_on_additional = NULL,
  .add_tags = NULL,
  .inherit_tags = FALSE,
  .update_model_file = TRUE,
  .overwrite = FALSE,
  .directory = get_model_directory()
)

\method{copy_model_from}{character}(
  .parent_mod,
  .new_model,
  .description,
  .based_on_additional = NULL,
  .add_tags = NULL,
  .inherit_tags = FALSE,
  .update_model_file = TRUE,
  .overwrite = FALSE,
  .directory = get_model_directory()
)

\method{copy_model_from}{numeric}(
  .parent_mod,
  .new_model,
  .description,
  .based_on_additional = NULL,
  .add_tags = NULL,
  .inherit_tags = FALSE,
  .update_model_file = TRUE,
  .overwrite = FALSE,
  .directory = get_model_directory()
)
}
\arguments{
\item{.parent_mod}{Integer that corresponds to parent model to use as a basis for the copy.}

\item{.new_model}{Integer that corresponds to the new model name to create. Function will create both `{.new_model}.yaml` and a new model file based on this path.}

\item{.description}{Description of new model run. This will be stored in the yaml (to be used later in `create_run_log()`).}

\item{.based_on_additional}{Character scaler or vector of paths to other models that this model was "based on." These are used to reconstuct model developement and ancestry. \strong{Paths must be relative to `.new_model` path.} Note that the `.parent_model` will automatically be added to the `based_on` field, so no need to include that here.}

\item{.add_tags}{A character scaler or vector with any new tags to be added to `{.new_model}.yaml`}

\item{.inherit_tags}{Boolean for whether to inherit any tags from `.parent_mod`}

\item{.update_model_file}{Boolean for whether to update the newly created model file. By default it is TRUE, but if FALSE is passed new model file will be an exact copy of its parent.}

\item{.overwrite}{Boolean for whether to overwrite model file if one already exists specified `.new_model` path}

\item{.directory}{Model directory which BOTH `.parent_model` and `.new_model` are relative to. Defaults to `options('rbabylon.model_directory')`, which can be set globally with `set_model_directory()`.}
}
\description{
Generic S3 method from iterating on models.

S3 dispatch for passing `bbi_nonmem_model` object to `copy_model_from()`

S3 dispatch for passing a file path to copy_model_from()

S3 dispatch for passing an integer model identifier to copy_model_from()
This will only work if you are calling from the same directory as the models, or if you have set the model directory with `set_model_directory()`
}
