% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/copy-model-from.R
\name{copy_model_from}
\alias{copy_model_from}
\alias{copy_model_from.bbi_nonmem_model}
\title{Create new model by copying existing model}
\usage{
copy_model_from(
  .parent_mod,
  .new_model,
  .description,
  .based_on_additional = NULL,
  .add_tags = NULL,
  .inherit_tags = FALSE,
  .update_model_file = TRUE,
  .overwrite = FALSE,
  .directory = get_model_directory()
)

\method{copy_model_from}{bbi_nonmem_model}(
  .parent_mod,
  .new_model,
  .description,
  .based_on_additional = NULL,
  .add_tags = NULL,
  .inherit_tags = FALSE,
  .update_model_file = TRUE,
  .overwrite = FALSE,
  .directory = get_model_directory()
)
}
\arguments{
\item{.parent_mod}{Model to copy from}

\item{.new_model}{Path to write new model files to \strong{without file extension}.
Function will create both \verb{\{.new_model\}.yaml} and a new model file based on
this path.}

\item{.description}{Description of new model run. This will be stored in the
yaml (to be used later in \code{run_log()}).}

\item{.based_on_additional}{Character vector of path(s) to other models that
this model was "based on." These are used to reconstuct model developement
and ancestry. \strong{Paths must be relative to \code{.new_model} path.} Note that
the \code{.parent_model} will automatically be added to the \code{based_on} field, so
no need to include that here.}

\item{.add_tags}{Character vector with any new tags(s) to be added to
\verb{\{.new_model\}.yaml}}

\item{.inherit_tags}{If \code{FALSE}, the default, new model will only have any
tags passed to \code{.add_tags} argument. If \code{TRUE} inherit any tags from
\code{.parent_mod}, with any tags passed to \code{.add_tags} appended.}

\item{.update_model_file}{If \code{TRUE}, the default, update the newly created
model file with new description and name. For a NONMEM model, this
currently means only the \verb{$PROBLEM} line in the new control stream will be
updated. If \code{FALSE}, new model file will be an exact copy of its parent.}

\item{.overwrite}{If \code{FALSE}, the default,  function will error if a model
file already exists at specified \code{.new_model} path. If \code{TRUE} any existing
file at \code{.new_model} will be overwritten silently.}

\item{.directory}{Model directory which \code{.new_model} is relative to. Defaults
to \code{options('rbabylon.model_directory')}, which can be set globally with
\code{set_model_directory()}.}
}
\description{
Create new model by copying existing model. Useful for iterating during model
development. Also fills \code{based_on} field by default, for constructing model
ancestry. See \href{../articles/using-based-on.html}{"Using based_on field" vignette} for details.
}
\section{Methods (by class)}{
\itemize{
\item \code{bbi_nonmem_model}: \code{.parent_mod} takes a \code{bbi_nonmem_model} object to use as a basis for the copy.
}}

