% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-register.R
\name{register_model_type}
\alias{register_model_type}
\title{Register a model type to class mapping}
\usage{
register_model_type(model_type, classes, class_type = c("model", "summary"))
}
\arguments{
\item{model_type}{Model type, as recorded in the model YAML file.}

\item{classes}{One or more classes to use for \code{model_type}.}

\item{class_type}{The kind of object, "model" or "summary".}
}
\description{
Define how to map a model type to model or summary object names when the
default mapping of \code{{type}} to \verb{bbi_\{type\}_model} or \verb{bbi_\{type\}_summary}
won't do. The primary use for this function is registering custom parent
types.
}
\details{
\code{\link[=create_model_object]{create_model_object()}} and \code{\link[=create_summary_object]{create_summary_object()}} are responsible for
creating model and summary objects for different model types (e.g.,
"bbi_nonmem_model" and "bbi_nonmem_summary" for "nonmem" model types). These
functions get the class name from \code{model_type_to_classes()}, which by default
constructs the class from the model type (e.g., "nonmem" is mapped to
\code{c("bbi_nonmem_model", ...)}).

That default value doesn't work if you want to define custom parents. For
example, \code{bbr.bayes} package wants to map "nmbayes" model type to
\code{c("bbi_nmbayes_model", "bbi_nonmem_model", ...)} so that \code{bbi_nmbayes_model}
objects can fall back to \code{.bbi_nonmem_model} methods where appropriate. In
these cases, a package can call \code{register_model_type()} within its
\code{\link[=.onLoad]{.onLoad()}} to "register" the custom classes.
}
\examples{
\dontrun{
register_model_type("foo",
                    c("bbi_foo_model", "bbi_nonmem_model"),
                    "model")
register_model_type("foo",
                    c("bbi_foo_summary", "bbi_nonmem_summary"),
                    "summary")
}

}
\keyword{internal}
